-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, world], insns)
{
  case insns of
    {} -> [stack, state, world]
  | insn : other -> eval ((
      case insn of
        READ -> case readWorld(w0) of [n, w0] -> [n:stack, state, w0] esac
      | WRITE -> case stack of v:s1 -> [s1, state, writeWorld(v, world)] esac
      | BINOP (op) -> case stack of b:a:s1 -> [evalOp(op, a, b) : s1, state, world] esac
      | LD (n) -> [state (n) : stack, state, world]
      | ST (n) -> case stack of v : s1 -> [s1, state <- [n, v], world] esac
      | CONST (v) -> [v : stack, state, world]
      esac
    ), other)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

fun compileExpr (exp)
{
  case exp of 
    Const(value) -> singletonBuffer(CONST(value)) |
    Var(variableName) -> singletonBuffer(LD(variableName)) |
    Binop(op, x, y) -> compileExpr(x)
        .concatBuffer(compileExpr(y)).addBuffer(BINOP(op)) |
    _ -> failure ("Can not compile '" ++ string(exp) ++ "'\n")
  esac
}


public fun compileSM (stmt)
{
  case stmt of
    Assn (x, e) -> compileExpr(e).addBuffer(ST(x)) |
    Read (x) -> singletonBuffer(READ).addBuffer(ST(x)) |
    Write (e) -> compileExpr(e).addBuffer(WRITE) |
    Seq (s1, s2) -> compileSM(s1).concatBuffer(compileSM(s2)) |
    Skip -> emptyBuffer() |
    _ -> failure("Can not compile SM '" ++ string(stmt) ++ "'\n")
  esac
}
