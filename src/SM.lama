-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
failure ("SM eval not implemented\n")
foldl (evalInsn, c, getBuffer (insns))
}

fun evalInsn(c, insn) {
case insn of
Read -> (
var newWorld = readWorld(c[2]);
[newWorld[0] : c[0], c[1], newWorld[1]]
) |
— stack top : end
Write -> [c[0].tl, c[1], writeWorld (c[0].hd, c[2])] |
—stack sec : fst : end
Binop (s) -> [evalBinop (s, c[0].tl.hd, c[0].hd) : c[0].tl.tl, c[1], c[2]] |
LD (x) -> [c[1] (x) : c[0], c[1], c[2]] |
— stack top : end
ST (x) -> [c[0].tl, c[1] <- [x,c[0].hd], c[2]] |
Const (n) -> [n : c[0], c[1], c[2]]
esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

fun compileExpr (exp)
{
  case exp of 
    Const(value) -> singletonBuffer(CONST(value)) |
    Var(variableName) -> singletonBuffer(LD(variableName)) |
    Binop(op, x, y) -> compileExpr(x)
        .concatBuffer(compileExpr(y)).addBuffer(BINOP(op)) |
    _ -> failure ("Can not compile '" ++ string(exp) ++ "'\n")
  esac
}


public fun compileSM (stmt)
{
  case stmt of
    Assn (x, e) -> compileExpr(e).addBuffer(ST(x)) |
    Read (x) -> singletonBuffer(READ).addBuffer(ST(x)) |
    Write (e) -> compileExpr(e).addBuffer(WRITE) |
    Seq (s1, s2) -> compileSM(s1).concatBuffer(compileSM(s2)) |
    Skip -> emptyBuffer() |
    _ -> failure("Can not compile SM '" ++ string(stmt) ++ "'\n")
  esac
}
